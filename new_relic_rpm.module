<?php
/**
 * @file
 * Drupal module implementing New Relic
 */

/**
 * Implements hook_cron().
 *
 * This is used to set cron tasks to be not tracked by RPM if so desired.
 */
function new_relic_rpm_cron() {
  $cron_tracking = \Drupal::config('new_relic_rpm.settings')->get('track_cron');
  \Drupal::service('new_relic_rpm.adapter')->setTransactionState($cron_tracking);
}

/**
 * Implements hook_modules_enabled().
 */
function new_relic_rpm_modules_enabled($modules) {
  // Make the Deploy call to New Relic.
  if (!empty($modules)) {
    new_relic_rpm_module_deploy($modules, NULL);
  }
}

/**
 * Implements hook_modules_disabled().
 */
function new_relic_rpm_modules_disabled($modules) {
  // Make the Deploy call to New Relic.
  if (!empty($modules)) {
    new_relic_rpm_module_deploy(NULL, $modules);
  }
}

/**
 * Log module enable/disable actions as a deploy call to New Relic RPM.
 */
function new_relic_rpm_module_deploy($new_modules, $disable_modules) {
  // If the API Key and/or App name is/are not set, there is no sense in
  // attempting to create deployments.
  if (\Drupal::config('new_relic_rpm.settings')->get('module_deployment') &&
      ini_get('newrelic.appname') &&
      \Drupal::config('new_relic_rpm.settings')->get('api_key')) {
    $modules_installed = !empty($new_modules);
    $modules_removed = !empty($disable_modules);

    if ($modules_installed) {
      $m_inst = 'Modules Installed: ' . implode(', ', $new_modules ) . "\n";
    }
    else {
      $m_inst = '';
    }

    if ($modules_removed) {
      $m_remv = 'Modules Removed: ' . implode(', ', $disable_modules) . "\n";
    }
    else {
      $m_remv = '';
    }

    _new_relic_rpm_deploy('Drupal Module Install/Uninstall',
      'Drupal modules were installed: ' . ($modules_installed ? 'YES' : 'NO') . ' and uninstalled: ' . ($modules_removed ? 'YES' : 'NO'),
      $m_inst . $m_remv);
  }
}

/**
 * Send deployments to New Relic's web API.
 *
 * @param string $user
 *   (optional) User deploying changes.
 * @param string $description
 *   (optional) Description of the deployment.
 * @param string $changelog
 *   (optional) A list of changes for this deployment.
 * @param string $revision
 *   (optional) Revision id of the deployment.
 *
 * @return NULL
 *   No return. Deployment is noted in watchdog and in New Relic.
 */
function _new_relic_rpm_deploy($user = NULL, $description = NULL, $changelog = NULL, $revision = NULL) {

  $post_vars['deployment[application_id]'] = ini_get('newrelic.appname');
  if (isset($user)) {
    $post_vars['deployment[user]'] = $user;
  }
  if (isset ($description)) {
    $post_vars['deployment[description]'] = $description;
  }
  if (isset($changelog)) {
    $post_vars['deployment[changelog]'] = $changelog;
  }
  if (isset($revision)) {
    $post_vars['deployment[revision]'] = $revision;
  }
  $deployments = new_relic_rpm_curl('https://rpm.newrelic.com/deployments.xml', $post_vars);

  \Drupal::logger('New Relic RPM')->notice('Module install/uninstall action logged as deployment. Log data: %details', array('%details' => $deployments));
}

/**
 * This is the generic cURL function all New Relic Web API calls go through.
 */
function new_relic_rpm_curl($url, $post = array()) {

  $api_key = \Drupal::config('new_relic_rpm.settings')->get('api_key');

  // Set the header with the API key.
  $headers[] = "x-api-key: {$api_key}";

  // Set up the cURL request.
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
  if (!empty($post)) {
    curl_setopt($ch, CURLOPT_POST, TRUE);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $post);
  }
  curl_setopt($ch, CURLOPT_TIMEOUT, 30);
  $return_data = curl_exec($ch);

  if (stristr($return_data, 'Access denied')) {
    return FALSE;
  }

  return $return_data;
}
